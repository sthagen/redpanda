// Copyright 2021 Vectorized, Inc.
//
// Use of this software is governed by the Business Source License
// included in the file licenses/BSL.md
//
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0

package resources

import (
	"context"
	"fmt"
	"strings"

	"github.com/go-logr/logr"
	cmapiv1 "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1"
	cmmeta "github.com/jetstack/cert-manager/pkg/apis/meta/v1"
	redpandav1alpha1 "github.com/vectorizedio/redpanda/src/go/k8s/apis/redpanda/v1alpha1"
	"github.com/vectorizedio/redpanda/src/go/k8s/pkg/labels"
	"k8s.io/apimachinery/pkg/api/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/types"
	k8sclient "sigs.k8s.io/controller-runtime/pkg/client"
	"sigs.k8s.io/controller-runtime/pkg/controller/controllerutil"
)

var _ Resource = &CertificateResource{}

// CAKey filename for root certificate
const CAKey = "ca.crt"

// CertificateResource is part of the reconciliation of redpanda.vectorized.io CRD
// creating Certificate from the Issuer resource to have TLS communication supported
type CertificateResource struct {
	k8sclient.Client
	scheme       *runtime.Scheme
	pandaCluster *redpandav1alpha1.Cluster
	issuer       *IssuerResource
	svcFQDN      string
	logger       logr.Logger
}

// NewCertificate creates CertificateResource
func NewCertificate(
	client k8sclient.Client,
	pandaCluster *redpandav1alpha1.Cluster,
	scheme *runtime.Scheme,
	issuer *IssuerResource,
	svcFQDN string,
	logger logr.Logger,
) *CertificateResource {
	return &CertificateResource{
		client, scheme, pandaCluster, issuer, svcFQDN, logger.WithValues("Kind", certificateKind()),
	}
}

// Ensure will manage cert-manager v1.Certificate for redpanda.vectorized.io custom resource
//nolint:dupl // we expect this to not be duplicated when more logic is added
func (r *CertificateResource) Ensure(ctx context.Context) error {
	if !r.pandaCluster.Spec.Configuration.TLS.KafkaAPIEnabled {
		return nil
	}

	var cert cmapiv1.Certificate

	err := r.Get(ctx, r.Key(), &cert)
	if err != nil && !errors.IsNotFound(err) {
		return err
	}

	if errors.IsNotFound(err) {
		r.logger.Info(fmt.Sprintf("Certificate %s does not exist, going to create one", r.Key().Name))

		obj, err := r.Obj()
		if err != nil {
			return err
		}

		return r.Create(ctx, obj)
	}

	return nil
}

// Obj returns resource managed client.Object
func (r *CertificateResource) Obj() (k8sclient.Object, error) {
	objLabels := labels.ForCluster(r.pandaCluster)
	cert := &cmapiv1.Certificate{
		ObjectMeta: metav1.ObjectMeta{
			Name:      r.Key().Name,
			Namespace: r.Key().Namespace,
			Labels:    objLabels,
		},
		Spec: cmapiv1.CertificateSpec{
			DNSNames: []string{
				"*." + strings.TrimSuffix(r.svcFQDN, "."),
			},
			SecretName: r.SecretKey().Name,
			IssuerRef: cmmeta.ObjectReference{
				Kind: issuerKind(),
				Name: r.issuer.Key().Name,
			},
			IsCA: true,
		},
	}

	err := controllerutil.SetControllerReference(r.pandaCluster, cert, r.scheme)
	if err != nil {
		return nil, err
	}

	return cert, nil
}

// SecretKey key of secret as generated by certificate
func (r *CertificateResource) SecretKey() types.NamespacedName {
	return r.Key()
}

// Key returns namespace/name object that is used to identify object.
// For reference please visit types.NamespacedName docs in k8s.io/apimachinery
func (r *CertificateResource) Key() types.NamespacedName {
	return types.NamespacedName{Name: r.pandaCluster.Name, Namespace: r.pandaCluster.Namespace}
}

// Kind returns cert-manager v1.Certificate kind
func (r *CertificateResource) Kind() string {
	return certificateKind()
}

func certificateKind() string {
	var obj cmapiv1.Certificate
	return obj.Kind
}
