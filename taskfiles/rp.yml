version: '3'

tasks:
  clean-cmake:
    desc: remove CMakeCache.txt and CMakeFiles/
    cmds:
    - |
      rm -fr \
        "{{.BUILD_DIR}}/CMakeCache.txt" \
        "{{.BUILD_DIR}}/CMakeFiles/" \
        "{{.BUILD_DIR}}/rp_deps_build/CMakeCache.txt" \
        "{{.BUILD_DIR}}/rp_deps_build/CMakeFiles/"

  clean-build:
    desc: "remove build folder [path: {{.BUILD_DIR}}]"
    cmds:
    - rm -rf '{{.BUILD_DIR}}'
    preconditions:
    - "[ {{.BUILD_ROOT}} != '' ] && [ {{.BUILD_TYPE}} != '' ] && [ {{.COMPILER}} != '' ]"

  configure:
    desc: configure redpanda build
    vars:
      RP_DEPS_SKIP_BUILD: '{{default "OFF" .RP_DEPS_SKIP_BUILD}}'
      RP_DEPS_BUILD_ONLY: '{{default "OFF" .RP_DEPS_BUILD_ONLY}}'
      RP_DEPS_INSTALL_DIR_DEFAULT: '{{.BUILD_DIR}}/rp_deps_install'
      RP_DEPS_INSTALL_DIR: '{{default .RP_DEPS_INSTALL_DIR_DEFAULT .RP_DEPS_INSTALL_DIR}}'
      VECTORIZED_CMAKE_DIR_DEFAULT:
        sh: 'realpath "{{.PWD}}/cmake"'
      VECTORIZED_CMAKE_DIR: "{{default .VECTORIZED_CMAKE_DIR_DEFAULT .VECTORIZED_CMAKE_DIR}}"
      CC: '{{.COMPILER}}'
      CXX: '{{if eq .COMPILER "gcc"}}g++{{else}}clang++{{end}}'
    cmds:
    - |
      PATH={{.LLVM_INSTALL_PATH}}/bin:$PATH
      cmake \
        -GNinja \
        -DREDPANDA_DEPS_INSTALL_DIR="{{.RP_DEPS_INSTALL_DIR}}" \
        -DVECTORIZED_CMAKE_DIR="{{.VECTORIZED_CMAKE_DIR}}" \
        -DCMAKE_BUILD_TYPE={{.BUILD_TYPE | lower | title}} \
        -DCMAKE_C_COMPILER={{.CC}} \
        -DCMAKE_CXX_COMPILER={{.CXX}} \
        -DV_DEPS_SKIP_BUILD={{.RP_DEPS_SKIP_BUILD}} \
        -DV_DEPS_ONLY={{.RP_DEPS_BUILD_ONLY}} \
        -B{{.BUILD_DIR}} \
        -H{{.SRC_DIR}}
    status:
    - test -f '{{.BUILD_DIR}}/CMakeCache.txt'
    - test -f '{{.BUILD_DIR}}/build.ninja'

  build:
    desc: build redpanda
    vars:
      TOTAL_PHYSICAL_MEMORY:
        sh: free -g | awk '/^Mem:/{print $2}'
      GB_PER_BUILD_CORE: '{{default "2" .GB_PER_BUILD_CORE}}'
    deps:
    - configure
    cmds:
    - |
      PATH={{.LLVM_INSTALL_PATH}}/bin:$PATH
      ninja -C '{{.BUILD_DIR}}' -j'{{div .TOTAL_PHYSICAL_MEMORY .GB_PER_BUILD_CORE}}'

  test:
    desc: run redpanda unit tests
    vars:
      CI: '{{ default "0" .CI}}'
      CTEST_ARGS: '{{default `-R ".*_rp(unit|bench|int)$"` .CTEST_ARGS}}'
      MIN_REQUIRED_AIO_MAX: 1048576
    dir: '{{.BUILD_DIR}}'
    cmds:
    - |
      CURRENT_AIO_MAX=$(sysctl -nb fs.aio-max-nr)
      if (( $CURRENT_AIO_MAX < {{.MIN_REQUIRED_AIO_MAX}} )); then
        sysctl -w fs.aio-max-nr={{.MIN_REQUIRED_AIO_MAX}}
      fi
    - ctest {{if eq .CI "1"}}"--output-on-failure"{{end}} {{.CTEST_ARGS}}
